name: release-linux

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.0" # run only on minor releases (patch == 0)
  workflow_dispatch:
    inputs:
      version:
        description: "SemVer to build (e.g., 1.2.3). Leave empty to use Cargo.toml"
        required: false
        type: string
      push_images:
        description: "Also push Docker images to GHCR (manual runs)"
        required: false
        default: false
        type: boolean
      create_release:
        description: "Also create a GitHub Release (manual runs)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: build (${{ matrix.bin }} @ ${{ matrix.target }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-unknown-linux-musl, aarch64-unknown-linux-musl]
        bin: [dnsm-client, dnsm-server, dnsm-ws]

    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable) and targets
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Zig
        uses: mlugg/setup-zig@v1
        with:
          version: 0.12.0

      - name: Cache cargo registry + git + target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-zigbuild
        run: cargo install cargo-zigbuild --locked

      - name: Compute version (tag or input)
        shell: bash
        run: |
          set -euxo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ver="${{ inputs.version }}"
            if [ -z "$ver" ]; then
              ver=$(sed -n 's/^version\s*=\s*"\([0-9]\+\.[0-9]\+\.[0-9]\+\)"/\1/p' Cargo.toml | head -n1)
            fi
            tag="v${ver}"
          else
            tag="${GITHUB_REF_NAME}"
            ver="${tag#v}"
          fi
          echo "TAG=$tag" >> "$GITHUB_ENV"
          echo "VERSION=$ver" >> "$GITHUB_ENV"

      - name: Verify Cargo.toml version matches tag/version
        shell: bash
        run: |
          set -euxo pipefail
          cargo_version=$(sed -n 's/^version\s*=\s*"\([0-9]\+\.[0-9]\+\.[0-9]\+\)"/\1/p' Cargo.toml | head -n1)
          if [ -z "$cargo_version" ]; then
            echo "Failed to parse version from Cargo.toml" >&2
            exit 1
          fi
          if [ "$cargo_version" != "$VERSION" ]; then
            echo "Tag ($VERSION) does not match Cargo.toml version ($cargo_version)" >&2
            exit 1
          fi

      - name: Build ${{ matrix.bin }} (musl, static)
        shell: bash
        env:
          BIN: ${{ matrix.bin }}
        run: |
          set -euxo pipefail
          case "$BIN" in
            dnsm-client) FEATURES="" ;;
            dnsm-server) FEATURES="sqlite" ;;
            dnsm-ws)     FEATURES="sqlite,ws-server" ;;
            *) echo "Unknown bin: $BIN" >&2; exit 1 ;;
          esac
          if [ -n "$FEATURES" ]; then
            cargo zigbuild --release --target ${{ matrix.target }} --bin "$BIN" --features "$FEATURES"
          else
            cargo zigbuild --release --target ${{ matrix.target }} --bin "$BIN"
          fi

      - name: Package artifacts
        shell: bash
        run: |
          set -euxo pipefail
          outdir="dist/${{ matrix.target }}"
          mkdir -p "$outdir"
          cp "target/${{ matrix.target }}/release/${{ matrix.bin }}" "$outdir/"
          strip -s "$outdir/${{ matrix.bin }}" || true
          tar_name="${{ matrix.bin }}-${VERSION}-${{ matrix.target }}.tar.gz"
          tar czf "$tar_name" -C "$outdir" "${{ matrix.bin }}"
          sha256sum "$tar_name" > "$tar_name.sha256"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.bin }}-${{ matrix.target }}
          path: |
            ${{ matrix.bin }}-${{ env.VERSION }}-${{ matrix.target }}.tar.gz
            ${{ matrix.bin }}-${{ env.VERSION }}-${{ matrix.target }}.tar.gz.sha256

  release:
    name: publish release
    needs: build
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.create_release)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute version (tag or input)
        shell: bash
        run: |
          set -euxo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ver="${{ inputs.version }}"
            if [ -z "$ver" ]; then
              ver=$(sed -n 's/^version\s*=\s*"\([0-9]\+\.[0-9]\+\.[0-9]\+\)"/\1/p' Cargo.toml | head -n1)
            fi
            tag="v${ver}"
          else
            tag="${GITHUB_REF_NAME}"
            ver="${tag#v}"
          fi
          echo "TAG=$tag" >> "$GITHUB_ENV"
          echo "VERSION=$ver" >> "$GITHUB_ENV"
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: dnsm ${{ env.TAG }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/*.tar.gz
            artifacts/*.sha256

  docker-arch:
    name: docker (${{ matrix.image }} @ ${{ matrix.arch }})
    needs: build
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:
          - image: dnsm-server
            file: docker/Dockerfile.dnsm-server
            cache_scope: dnsm-server
            platform: linux/amd64
            arch: amd64
          - image: dnsm-server
            file: docker/Dockerfile.dnsm-server
            cache_scope: dnsm-server
            platform: linux/arm64
            arch: arm64
          - image: dnsm-ws
            file: docker/Dockerfile.dnsm-ws
            cache_scope: dnsm-ws
            platform: linux/amd64
            arch: amd64
          - image: dnsm-ws
            file: docker/Dockerfile.dnsm-ws
            cache_scope: dnsm-ws
            platform: linux/arm64
            arch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute version (tag or input)
        shell: bash
        run: |
          set -euxo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ver="${{ inputs.version }}"
            if [ -z "$ver" ]; then
              ver=$(sed -n 's/^version\s*=\s*"\([0-9]\+\.[0-9]\+\.[0-9]\+\)"/\1/p' Cargo.toml | head -n1)
            fi
            tag="v${ver}"
          else
            tag="${GITHUB_REF_NAME}"
            ver="${tag#v}"
          fi
          echo "TAG=$tag" >> "$GITHUB_ENV"
          echo "VERSION=$ver" >> "$GITHUB_ENV"

      - name: Docker metadata (${{ matrix.image }})
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=v${{ env.VERSION }}
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest
          flavor: |
            latest=false
            suffix=-${{ matrix.arch }}

      - name: Build and push ${{ matrix.image }} (${{ matrix.arch }})
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.file }}
          push: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.push_images) }}
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.cache_scope }}-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.cache_scope }}-${{ matrix.arch }}

  docker-manifest:
    name: docker manifest (dnsm-server, dnsm-ws)
    needs: docker-arch
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.push_images)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute version (tag or input)
        shell: bash
        run: |
          set -euxo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ver="${{ inputs.version }}"
            if [ -z "$ver" ]; then
              ver=$(sed -n 's/^version\s*=\s*"\([0-9]\+\.[0-9]\+\.[0-9]\+\)"/\1/p' Cargo.toml | head -n1)
            fi
            tag="v${ver}"
          else
            tag="${GITHUB_REF_NAME}"
            ver="${tag#v}"
          fi
          echo "TAG=$tag" >> "$GITHUB_ENV"
          echo "VERSION=$ver" >> "$GITHUB_ENV"

      - name: Create and push multi-arch manifests
        shell: bash
        env:
          OWNER: ${{ github.repository_owner }}
        run: |
          set -euxo pipefail
          for img in dnsm-server dnsm-ws; do
            for t in "v${VERSION}" "${VERSION}" latest; do
              docker buildx imagetools create \
                --tag ghcr.io/${OWNER}/${img}:${t} \
                ghcr.io/${OWNER}/${img}:${t}-amd64 \
                ghcr.io/${OWNER}/${img}:${t}-arm64 || true
            done
          done
